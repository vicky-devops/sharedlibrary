{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspaceName": {
            "type": "string",
            "metadata": {
              "description": "Specifies the name of the Azure Machine Learning workspace."
            }
          },
        "sku": {
            "type": "string",
            "defaultValue": "basic",
            "allowedValues": [
              "basic",
              "enterprise"
            ],
            "metadata": {
              "description": "Specifies the sku, also referred as 'edition' of the Azure Machine Learning workspace."
            }
        },
        "identityType": {
            "type": "string",
            "defaultValue": "systemAssigned",
            "allowedValues": [
              "systemAssigned",
              "userAssigned"
            ],
            "metadata": {
              "description": "Specifies the identity type of the Azure Machine Learning workspace."
            }
          },
          "storageAccountOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
              "new",
              "existing"
            ],
            "metadata": {
              "description": "Determines whether or not a new storage should be provisioned."
            }
          },
          "storageAccountName": {
            "type": "string",
            "defaultValue": "[concat('sa',uniqueString(resourceGroup().id, parameters('workspaceName')))]",
            "metadata": {
              "description": "Name of the storage account."
            }
          },
          "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
              "Standard_LRS",
              "Standard_GRS",
              "Standard_RAGRS",
              "Standard_ZRS",
              "Standard_GZRS",
              "Standard_RAGZRS"
            ]
          },
          "storageAccountBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
              "true",
              "false"
            ],
            "metadata": {
              "description": "Determines whether or not to put the storage account behind VNet"
            }
          },
          "storageAccountResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
              "description": "Resource group name of the storage account if using existing one"
            }
          },
          "keyVaultOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
              "new",
              "existing"
            ],
            "metadata": {
              "description": "Determines whether or not a new key vault should be provisioned."
            }
          },
          "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('kv',uniqueString(resourceGroup().id, parameters('workspaceName')))]",
            "metadata": {
              "description": "Name of the key vault."
            }
          },
          "keyVaultBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
              "true",
              "false"
            ],
            "metadata": {
              "description": "Determines whether or not to put the storage account behind VNet"
            }
          },
          "keyVaultResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
              "description": "Resource group name of the key vault if using existing one"
            }
          },
          "applicationInsightsOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
              "new",
              "existing"
            ],
            "metadata": {
              "description": "Determines whether or not new ApplicationInsights should be provisioned."
            }
          },
          "applicationInsightsName": {
            "type": "string",
            "defaultValue": "[concat('ai',uniqueString(resourceGroup().id, parameters('workspaceName')))]",
            "metadata": {
              "description": "Name of ApplicationInsights."
            }
          },
          "applicationInsightsResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
              "description": "Resource group name of the application insights if using existing one."
            }
          },
          "containerRegistryOption": {
            "type": "string",
            "defaultValue": "none",
            "allowedValues": [
              "new",
              "existing",
              "none"
            ],
            "metadata": {
              "description": "Determines whether or not a new container registry should be provisioned."
            }
          },
          "containerRegistryName": {
            "type": "string",
            "defaultValue": "[concat('cr',uniqueString(resourceGroup().id, parameters('workspaceName')))]",
            "metadata": {
              "description": "The container registry bind to the workspace."
            }
          },
          "containerRegistrySku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
              "Basic",
              "Standard",
              "Premium"
            ]
          },
          "containerRegistryResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
              "description": "Resource group name of the container registry if using existing one."
            }
          },
          "containerRegistryBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
              "true",
              "false"
            ],
            "metadata": {
              "description": "Determines whether or not to put container registry behind VNet."
            }
          },
        //   "vnetOption": {
        //     "type": "string",
        //     "defaultValue": "[if(equals(parameters('privateEndpointType'), 'none'), 'none', 'new')]",
        //     "allowedValues": [
        //       "new",
        //       "existing",
        //       "none"
        //     ],
        //     "metadata": {
        //       "description": "Determines whether or not a new VNet should be provisioned."
        //     }
        //   },
        "vnetName": {
            "type": "string",
            "defaultValue": "[concat('vn',uniqueString(resourceGroup().id, parameters('workspaceName')))]",
            "metadata": {
                "description": "VNet name"
            }
        },
        "vnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Address prefix"
            }
        },
        // "subnetOption": {
        //     "type": "string",
        //     "defaultValue": "[if(or(not(equals(parameters('privateEndpointType'), 'none')), equals(parameters('vnetOption'), 'new')), 'new', 'none')]",
        //     "allowedValues": [
        //       "new",
        //       "existing",
        //       "none"
        //     ],
        //     "metadata": {
        //       "description": "Determines whether or not a new subnet should be provisioned."
        //     }
        //   },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
            "description": "Subnet 1 Prefix"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "Subnet1",
            "metadata": {
            "description": "Subnet 1 Name"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
            "description": "Location for all resources."
            }
        },
        "privateEndpointType": {
            "type": "string",
            "defaultValue": "none",
            "allowedValues": [
              "AutoApproval",
              "ManualApproval",
              "none"
            ]
          }
    },
    "variables": {
        "tenantId": "[subscription().tenantId]",
       "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
       "keyVault": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
       "containerRegistry": "[resourceId(parameters('containerRegistryResourceGroupName'), 'Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
       "applicationInsights": "[resourceId(parameters('applicationInsightsResourceGroupName'), 'Microsoft.Insights/components', parameters('applicationInsightsName'))]",
       "privateEndpointName": "[concat(parameters('workspaceName'), '-PrivateEndpoint')]",
       "enablePE": "[not(equals(parameters('privateEndpointType'), 'none'))]",
       "subnetPolicyForPE": {
         "privateEndpointNetworkPolicies": "Enabled",
         "privateLinkServiceNetworkPolicies": "Disabled"
       },
       "privateEndpointSettings": {
           "name": "[concat(parameters('workspaceName'), '-PrivateEndpoint')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('workspaceName'))]",
              "groupIds": [
                "amlworkspace"
              ]
            }
          },
          "defaultPEConnections": "[array(variables('privateEndpointSettings'))]",
          "azAppInsightsLocationMap": {
            "eastus": "eastus",
            "eastus2": "eastus2",
            "westus": "westus"   
          },
          "appInsightsLocation": "[variables('azAppInsightsLocationMap')[parameters('location')]]"
    },
    "resources": [
        {
          //"condition": "[equals(parameters('vnetOption'), 'new')]",
          "type": "Microsoft.Network/virtualNetworks",
          "apiVersion": "2020-05-01",
          "name": "[parameters('vnetName')]",
          "location": "[parameters('location')]",
          "properties": {
            "addressSpace": {
              "addressPrefixes": [
                "[parameters('vnetAddressPrefix')]"
              ]
            }
          },
          "resources": [
            {
              //"condition": "[equals(parameters('subnetOption'), 'new')]",
              "type": "subnets",
              "apiVersion": "2020-05-01",
              "location": "[parameters('location')]",
              "name": "[parameters('subnetName')]",
              "dependsOn": [
                "[parameters('vnetName')]"
              ],
              "properties": {
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Disabled",
                "addressPrefix": "[parameters('subnetPrefix')]"
              }
            }
        ]
    },
    {
        "condition": "[equals(parameters('storageAccountOption'), 'new')]",
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-06-01",
        "name": "[parameters('storageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[parameters('storageAccountType')]"
        },
        "kind": "StorageV2",
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
        ],
        "properties": {
          "encryption": {
            "services": {
              "blob": {
                "enabled": true
              },
              "file": {
                "enabled": true
              }
            },
            "keySource": "Microsoft.Storage"
          },
          "supportsHttpsTrafficOnly": true,
          "networkAcls": "[if(equals(parameters('storageAccountBehindVNet'), 'true'), variables('networkRuleSetBehindVNet'), json('null'))]"
        }
      },
      {
        "condition": "[equals(parameters('keyVaultOption'), 'new')]",
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2019-09-01",
        "name": "[parameters('keyVaultName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
        ],
        "properties": {
          "tenantId": "[variables('tenantId')]",
          "sku": {
            "name": "standard",
            "family": "A"
          },
          "accessPolicies": [],
          "networkAcls": "[if(equals(parameters('keyVaultBehindVNet'), 'true'), variables('networkRuleSetBehindVNet'), json('null'))]"
        }
      },
      {
        "condition": "[equals(parameters('containerRegistryOption'), 'new')]",
        "type": "Microsoft.ContainerRegistry/registries",
        "apiVersion": "2019-12-01-preview",
        "name": "[parameters('containerRegistryName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[parameters('containerRegistrySku')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
        ],
        "properties": {
          "adminUserEnabled": true,
          "networkRuleSet": "[if(equals(parameters('containerRegistryBehindVNet'), 'true'), variables('networkRuleSetBehindVNet'), json('null'))]"
        }
      },
      {
        "condition": "[equals(parameters('applicationInsightsOption'), 'new')]",
        "type": "Microsoft.Insights/components",
        "apiVersion": "2020-02-02-preview",
        "name": "[parameters('applicationInsightsName')]",
        "location": "[variables('appInsightsLocation')]",
        "kind": "web",
        //"tags": "[parameters('tagValues')]",
        "properties": {
          "Application_Type": "web"
        }
      },
    {
        "type": "Microsoft.MachineLearningServices/workspaces",
        "apiVersion": "2020-09-01-preview",
        "name": "[parameters('workspaceName')]",
        "location": "[parameters('location')]",
        "sku": {
          "tier": "[parameters('sku')]",
          "name": "[parameters('sku')]"
        },
        "identity": {
            "type": "[parameters('identityType')]",
            "userAssignedIdentities": "[if(equals(parameters('identityType'), 'userAssigned'), variables('userAssignedIdentities'), json('null'))]"
        },
        "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
         "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
         "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
         "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
        ],
        "properties": {
          "friendlyName": "[parameters('workspaceName')]",
         "storageAccount": "[variables('storageAccount')]",
          "keyVault": "[variables('keyVault')]",
          "applicationInsights": "[variables('applicationInsights')]",
          "containerRegistry": "[if(not(equals(parameters('containerRegistryOption'), 'none')), variables('containerRegistry'), json('null'))]"
          }
        }
    ]
}
